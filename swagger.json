{
	"swagger": "2.0",
	"info": {
		"version": "1.0.0",
    "title": "WayFarer API Documentation",
    "description": "Welcome to the Wayfarer documentation page. WayFarer is a public bus transportation booking server. The server allows admin users to create a trip which the normal users can book. Any trip can be cancelled by an admin. Also, a normal user can delete any of their bookings.\n\nThis page describes each of the endpoints and also provide a way to consume them.\n\n##### HOW TO GET STARTED\n- Sign in or sign up\n- Copy the token from the sign in or sign up api response\n- Click on the **Authorize** button or any of the lock buttons\n- Paste the token on the **value** field\n- Access any of the endpoints (NB - some endpoints require admin privilege, so you need to be an admin user before you can consume them)"
	},
	"basePath": "/api/v1",
	"schemes": [
    "https",
    "http"
	],
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"securityDefinitions": {
		"bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "headers"
    }
	},
	"paths": {
		"/auth/signup": {
			"post": {
				"tags": [
					"User"
				],
        "description": "Create user account",
        "summary": "Register as a user",
				"operationId": "signUp",
				"parameters": [
					{
						"in": "body",
						"name": "user",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						},
						"description": "The details of the new user"
					}
				],
				"responses": {
					"201": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SignUpResponse"
						}
					},
					"400": {
						"description": "Bad Input Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"422": {
						"description": "Unprocessable Entity Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/auth/signin": {
			"post": {
				"tags": [
					"User"
				],
				"description": "Login a user",
        "summary": "Login as a user",
				"operationId": "signIn",
				"parameters": [
					{
						"in": "body",
						"name": "sign_in_credential",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SignInCredential"
						},
						"description": "The sigin credentials of the new user"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SignUpResponse"
						}
					},
					"400": {
						"description": "Bad Input Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Authentication Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/trips": {
			"post": {
				"tags": [
					"Trip"
				],
				"description": "Create a trip (Only an admin can perform this operation)",
        "summary": "Create a trip",
				"operationId": "createTrip",
				"parameters": [
					{
						"in": "body",
						"name": "trip",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TripRequest"
						},
						"description": "The details of the new trip"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/TripResponse"
						}
					},
					"400": {
						"description": "Bad Input Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Authentication Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"description": "Authorization Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				},
				"security": [
					{
						"bearerAuth": []
					}
				]
			},
			"get": {
				"tags": [
					"Trip"
				],
				"description": "Get all trips",
        "summary": "Get all the trips",
				"operationId": "getTrips",
				"parameters": [
					{
						"in": "query",
						"name": "origin",
						"type": "string"
					},
					{
						"in": "query",
						"name": "destination",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TripResponse"
							}
						}
					},
					"400": {
						"description": "Bad Input Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Authentication Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				},
				"security": [
					{
						"bearerAuth": []
					}
				]
			}
		},
		"/trips/{tripId}": {
			"patch": {
				"tags": [
					"Trip"
				],
				"description": "Cancel a trip (Only an admin can perform this operation)",
        "summary": "Cancel a trip",
				"operationId": "cancelTrip",
				"parameters": [
					{
						"name": "tripId",
						"in": "path",
						"description": "ID of trip to cancel",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "string"
								},
								"data": {
									"$ref": "#/definitions/TripCancelledResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Input Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Authentication Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"description": "Authorization Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				},
				"security": [
					{
						"bearerAuth": []
					}
				]
			}
		},
		"/bookings": {
			"post": {
				"tags": [
					"Booking"
				],
				"description": "Book a seat on a trip",
        "summary": "Book a seat on a trip",
				"operationId": "bookTrip",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/BookingRequest"
						},
						"description": "The details of the new booking"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/BookingResponse"
						}
					},
					"400": {
						"description": "Bad Input Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Authentication Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				},
				"security": [
					{
						"bearerAuth": []
					}
				]
			},
			"get": {
				"tags": [
					"Booking"
				],
				"description": "Get bookings. Return all the booking for an admin and only the user's bookings for non-admin",
        "summary": "Get bookings",
				"operationId": "getBookings",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "string"
								},
								"data": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/BookingResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Input Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Authentication Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				},
				"security": [
					{
						"bearerAuth": []
					}
				]
			}
		},
		"/bookings/{bookingId}": {
			"delete": {
				"tags": [
					"Booking"
				],
				"description": "Delete a booking (Users can only delete that belong to them)",
        "summary": "Delete a booking",
				"operationId": "deleteBooking",
				"parameters": [
					{
						"name": "bookingId",
						"in": "path",
						"description": "ID of booking to return",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "string"
								},
								"data": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad Input Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"401": {
						"description": "Authentication Failed Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				},
				"security": [
					{
						"bearerAuth": []
					}
				]
			}
		}
	},
	"definitions": {
		"TripCancelledResponse": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string"
				},
				"affected_users": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/AffectedUser"
					}
				}
			}
		},
		"AffectedUser": {
			"type": "object",
			"properties": {
				"user_id": {
					"type": "integer"
				},
				"email": {
					"type": "string"
				},
				"first_name": {
					"type": "string"
				},
				"last_name": {
					"type": "string"
				},
				"booked_seats": {
					"type": "array",
					"items": {
						"type": "integer"
					}
				}
			}
		},
		"BookingResponse": {
			"type": "object",
			"properties": {
				"booking_id": {
					"type": "integer"
				},
				"user_id": {
					"type": "integer"
				},
				"trip_id": {
					"type": "integer"
				},
				"bus_id": {
					"type": "integer"
				},
				"seat_number": {
					"type": "integer"
				},
				"trip_date": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"first_name": {
					"type": "string"
				},
				"last_name": {
					"type": "string"
				},
				"number_plate": {
					"type": "string"
				},
				"model": {
					"type": "string"
				},
				"manufacturer": {
					"type": "string"
				}
			}
		},
		"BookingRequest": {
			"type": "object",
			"required": [
				"trip_id"
			],
			"properties": {
				"trip_id": {
					"type": "integer"
				},
				"seat_number": {
					"type": "integer"
				}
			}
		},
		"TokenRequest": {
			"type": "object",
			"required": [
				"token"
			],
			"properties": {
				"token": {
					"type": "string"
				}
			}
		},
		"PathIdResponse": {
			"type": "object",
			"required": [
				"data"
			],
			"properties": {
				"data": {
					"type": "string"
				}
			}
		},
		"TripRequest": {
			"type": "object",
			"properties": {
				"bus_id": {
          "type": "integer",
          "example": 1
				},
				"origin": {
          "type": "string",
          "example": "Asgard"
				},
				"destination": {
          "type": "string",
          "example": "Knowhere"
				},
				"trip_date": {
          "type": "string",
          "format": "date",
          "example": "2020-04-01"
				},
				"fare": {
					"type": "number",
          "format": "double",
          "example": 70000
				}
			}
		},
		"TripResponse": {
			"type": "object",
			"properties": {
				"trip_id": {
					"type": "integer"
				},
				"bus_id": {
					"type": "integer"
				},
				"origin": {
					"type": "string"
				},
				"destination": {
					"type": "string"
				},
				"trip_date": {
					"type": "string"
				},
				"fare": {
					"type": "number",
					"format": "double"
				},
				"status": {
					"type": "string"
				},
				"available_seats": {
					"type": "array",
					"items": {
						"type": "integer"
					}
				}
			}
		},
		"SignInCredential": {
			"type": "object",
			"required": [
				"email",
				"password"
			],
			"properties": {
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				}
			}
		},
		"User": {
			"type": "object",
			"required": [
				"email",
				"password",
				"first_name",
				"last_name",
				"is_admin"
			],
			"properties": {
				"id": {
          "type": "integer",
          "readOnly": true
				},
				"email": {
          "type": "string",
          "example": "loki@example.com"
				},
				"password": {
					"type": "string",
          "example": "FearThanos"
				},
				"first_name": {
					"type": "string",
          "example": "Loki"
				},
				"last_name": {
					"type": "string",
          "example": "Laufeyson"
				},
				"is_admin": {
					"type": "boolean",
          "example": false
				}
			}
		},
		"SignUpResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"description": "The response status"
				},
				"data": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "integer",
							"description": "The user id"
						},
						"is_admin": {
							"type": "boolean",
							"description": "The user admin status"
						},
						"token": {
							"type": "string",
							"description": "The user alloted token for subsequent authentications"
						}
					}
				}
			}
		},
		"ErrorResponse": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string"
				},
				"error": {
					"type": "string"
				}
			}
		}
	}
}
